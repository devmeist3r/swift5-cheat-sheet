<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

// MARK: - Collection Types
/// Array, Set and Dictionaries of Swift

// MARK: - Arrays
/// An array is used to stote a collection of data. Data can be of the same type of different type.
/// Array consist of contiguous memory locations. Lowest address corresponds to the first element and the highest address to the last element.

// MARK: - Basics Points
/// Swift array store multiple values of the same data type in an ordered list.
/// Swift arrays are specific about the kinds of values the can store. Store same kind of data type.
/// Swift Arrays are mutable
/// Type of Swift Array is written as either Array&lt;SomeType&gt; OR [SomeType]

// MARK: - Creating Arrays
/// Create an empty array of a certain type using initializer syntax.
var swiftArray = [Int]()
var swiftArray1 = Array&lt;Int&gt;()

/// Create an array of given size and assign values to each elements
var swiftArray2: [Int] = [10, 20, 30]

/// Create an array of a certain size with all of its values set to a provided default value. In this count is the number of items to be added. And repeatedValue is a default value of appropriate type of array.
var arr1 = Array(repeating: 0.5, count: 3)

// MARK: - Combining Arrays
/// Create a new array by adding together two existing arrays.
/// You can combine together two existing array only of compatilble types with the ( + ) addition operator.
var swiftArray3 = [1, 2, 3, 4]
var swiftArray4 = [5, 6, 7, 8]

var swiftArrayA = swiftArray3 + swiftArray4
print(swiftArrayA)

// MARK - Enumerating Arrays
/// Iterating over entire set of values in an array.
/// You can use for-in loop to iterate over the entire set of values in an array

var swiftArray5 = ["Apple", "Google", "Amazon", "Microsoft"]
for item in swiftArray5 {
    print(item)
}

var swiftArray6: [String] = ["Tim", "Cook", "Jeff", "Bezos", "Sundar", "Pichai"]
for(index, item) in swiftArray6.enumerated() {
    print("index = \(index) contains the value \(item)")
}

// MARK: - Accessing and Modifying an Array
// Number of Items in an Array
/// To find out the number of items in an array, use reat-olny count property.
var swiftArray7 =  ["Tim", "Cook", "Jeff", "Bezos", "Sundar", "Pichai"]
print("Swift array contains \(swiftArray7.count)")

// Add a new item to the end

/// Add new item to the end of items in an array by calling the append method
swiftArray7.append("Bill")

/// You can also add a new item to the end using addtion assignment (+=) operator.
swiftArray7 += ["Gates"]
print(swiftArray7)

// Access Using Subscript Syntax or index methods
/// Retrive a value form the array using subscript syntax
var itemAtZeroIndex = swiftArray7[0]
print(itemAtZeroIndex)

/// Use subscript syntax to replace an existing value at a given index
swiftArray7[4] = "Mark"
print(swiftArray7)

/// Use subscript to replace a range of values at once
swiftArray7[0...2] = ["Pedro", "Jose", "Joao"]
print(swiftArray7)

// Insert an item into Array at a specified Index
/// To insert an item into the array at a specified Index, call the array's insert(_:at) method
swiftArray7.insert("Satya", at: 4)

// Remove an item from the array at a specified index
/// you can remove an item from the array with the remove(at:) method
let mark = swiftArray7.remove(at: 2)
print(swiftArray7)

/// Use removeFirst method to remove the first item from an array
let pedro = swiftArray7.removeFirst()
print(swiftArray7)

/// Use removeLast method to remove the final item from an array
let gates = swiftArray7.removeLast()
print(swiftArray7)

// MARK: - Sets
/// A set stores distinct values of the same or different type in a collection with no defined ordering.
/// Use set instead of arrays when the order of items is not required or when you need to ensure tha an item only appears once.
/// Set values must be hashable in order to be stored in a set.

// MARK: - Basic Poins of Sets
/// Swift set stored distinct values of the same type in a collection with no defined ordering.
/// Swift sets are specific about the kinds of values the can store. Store same kind of data type.
/// Swift sets are mutable.
/// Type of a Swift Set is written as Set &lt;Type&gt;

// MARK: - Creating and Initializing an Empty Set
/// Create an empty set of a certain type using initializer syntax:
var swiftSet = Set&lt;Int&gt;()
print("swiftSet is of type Set&lt;Int&gt; with \(swiftSet.count)")

/// Create an empty set with an empty array literal:
var swiftSet1 = Set&lt;Int&gt;()
print("swiftSet is of type Set&lt;Int&gt; with \(swiftSet1.count)")
swiftSet1.insert(2)
print(swiftSet1)
swiftSet1 = []
print(swiftSet1)

/**
 Dictionaries
 - Dictionary is associative container that maps(usually unique) keys to values.
 - Keys of a dictionary have to be hashable
 - Entries (Key-value pair) appear in no particular order.
 */

// MARK: - Creating Dictionaries
/**
 - You can create an empty dictionary of a certain type using the initializer syntax.
 */
var swiftDict = Dictionary&lt;Int, String&gt;()
// OR
var swiftDict1 = [Int: String]()

/**
 - Create a dictionary from a set of key-value pairs.
 */
var swiftDict2: Dictionary&lt;Int, String&gt; = [1: "One", 2: "Two", 3: "Three"]

// MARK: - Counting Entries
/**
 You can use the read only count property of swift dictionary to find out the number of entries in a dictionary
 */
var swiftDict3: Dictionary&lt;Int, String&gt; = [1: "One", 2: "Two", 3: "Three"]
print(swiftDict3.count)

// MARK: - Accessing Dictionaries
/**
 - You can retrieve a value from a dictionary by using subscript syntax, passing the key of the value you want to retrieve within square brackets immediately after the name of the dictionary.
 - Dictionary subscript returns an optional value of dictionary's value type.
 */
var swiftDict4: Dictionary&lt;Double, String&gt; = [1.0: "One", 2.0: "Two", 3.0: "Three"]
var valueOfIndex1 = swiftDict4[1.0]
print(valueOfIndex1)

// MARK: - Modifying Dictionaries
/**
 - Set or update the value for a particular key
 - You can use updateValue(_:forKey:) method to add an existing value to a particular key of the dictionary.
 - updateValue(_:forKey:) method returns an optional value the dictionary's value type.
 */

var swiftDict5: Dictionary&lt;Double, String&gt; = [1.0: "One", 2.0: "Two", 3.0: "Three"]
var removeValueForKey = swiftDict5.removeValue(forKey: 1.0)
print(swiftDict5)

/**
 - You can also use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for the specified key.
 */

var swiftDict6: Dictionary&lt;Double, String&gt; = [1.0: "One", 2.0: "Two", 3.0: "Three"]
swiftDict6[2.0] = nil
print(swiftDict6)

// MARK: - Enumerating Dictionaries
/**
 - You can use for-in loop to iterate over the entire ser of key-value pairs in swift dictionary.
 */
var swiftDict7: Dictionary&lt;Double, String&gt; = [1.0: "One", 2.0: "Two", 3.0: "Three"]
for (key, value) in swiftDict7 { 
    print("\(key): \(value)")
}

/**
 - You can use unumerated() function which returns the index of the item along with its (key, value) pair
 */

for(key, value) in swiftDict7.enumerated() { 
    print("Dictionary key: \(key): Dictionary value: \(value)")
}

// MARK: - Convert To Arrays
/**
 - Array of keys and array of values extracted from a dictionary
 - Extract a list of key-value pairs from a given swift dictionary using keys property and values property and build an array of key and an array of values.
 */

var swiftDict8: Dictionary&lt;Double, String&gt; = [1.0: "One", 2.0: "Two", 3.0: "Three"]
let doubleKeys: [Double] = Array(swiftDict8.keys)
let values: [String]? = Array(swiftDict8.values)
print("\(doubleKeys) and... \(values)")


</string>
			<key>ModifiedRange</key>
			<string>{0, 7531}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
