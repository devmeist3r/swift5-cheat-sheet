<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation
// MARK: - Classes

/**
 - A class is blueprint or template to build a specific type of object, and for provinding initial values for state (data memebers) and implementation of behavior (methods and functions).
 - Initial state are defined by initializers 
 - Confirm Protocols
 - Support inheritance 
 - Support class extensions to add custom behavior to an existing class.
 - Support deinitializer to take care of releasing memory resources.
 */

struct Dimension {
    var width: Int
    var height: Int
}

class Photo {
    var dimension = Dimension(width: 10, height: 10)
    var format: String = ""
    var size: Int = 0
    var alpha: Bool = false
}

// MARK: - Creating Class Instances
/**
 - Syntax for creating class instance using initializer for the above define class called Photo:
 */
let awesomePhoto = Photo()
print("Width of awesome photo is: \(awesomePhoto.dimension.width)")

/// Assign a new value to a variable to a variable property: 
awesomePhoto.dimension.width = 100
print("Width of awesome photo is: \(awesomePhoto.dimension.width)")

// MARK: - Identity Operators
/**
 - Available only in Swift
 - Identical to (===) operator: Returns true when two constants or variables pointing to a same instance.
 - Not Identical to (!===) operator: Returns true when two constants or variables pointing to a different instance.
 */

let firstPhoto = Photo()
let secondPhoto = firstPhoto
let thirdPhoto = Photo()

if secondPhoto === firstPhoto { 
    print("true1")
}

if thirdPhoto === firstPhoto { 
    print("true2")
}

if thirdPhoto !== firstPhoto {
    print("true3")
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 1609}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
